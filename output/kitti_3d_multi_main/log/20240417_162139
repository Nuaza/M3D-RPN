[INFO]: 2024-04-17 16:21:39,490 ==开始处理数据集==
[INFO]: 2024-04-17 16:21:39,491 命中imdb缓存.
[INFO]: 2024-04-17 16:21:40,732 前景加权为: 1.05 背景加权为: 0.00
[INFO]: 2024-04-17 16:21:40,732 找到 3534 张前景图和 178 张空图
[INFO]: 2024-04-17 16:21:43,236 训练过程未使用的标签.. ['DontCare', 'Truck', 'Tram', 'Misc', 'Person_sitting']
[INFO]: 2024-04-17 16:21:43,237 ==数据集处理完毕==
[INFO]: 2024-04-17 16:21:46,240 ==开始生成anchors==
[INFO]: 2024-04-17 16:21:46,241 ==anchors生成完毕==
[INFO]: 2024-04-17 16:21:49,244 ==开始计算bbox参数==
[INFO]: 2024-04-17 16:21:49,244 命中bbox的回归均值缓存
[INFO]: 2024-04-17 16:21:49,244 命中bbox的回归标准差缓存
[INFO]: 2024-04-17 16:21:49,245 ==bbox参数计算完毕==
[INFO]: 2024-04-17 16:21:57,282 设置保存完成
[INFO]: 2024-04-17 16:22:00,285 训练配置一览
[INFO]: 2024-04-17 16:22:02,293 训练配置: {
    model:                  densenet121_3d_dilate_depth_aware       
    solver_type:            sgd                                     
    lr:                     0.004                                   
    momentum:               0.9                                     
    weight_decay:           0.0005                                  
    max_iter:               50000                                   
    snapshot_iter:          10000                                   
    display:                250                                     
    do_test:                True                                    
    lr_policy:              poly                                    
    lr_steps:               None                                    
    lr_target:              4e-08                                   
    rng_seed:               114514                                  
    cuda_seed:              114514                                  
    image_means:            [0.485, 0.456, 0.406]                   
    image_stds:             [0.229, 0.224, 0.225]                   
    feat_stride:            16                                      
    has_3d:                 True                                    
    test_scale:             512                                     
    crop_size:              [512, 1760]                             
    mirror_prob:            0.5                                     
    distort_prob:           -1                                      
    dataset_test:           kitti_split1                            
    datasets_train:         [{'anno_fmt': 'kitti_det',
                             'im_ext': '.png',
                             'name': 'kitti_split1',
                             'scale': 1}]
    use_3d_for_2d:          True                                    
    percent_anc_h:          [0.0625, 0.75]                          
    min_gt_h:               32.0                                    
    max_gt_h:               384.0                                   
    min_gt_vis:             0.65                                    
    ilbls:                  ['Van', 'ignore']                       
    lbls:                   ['Car', 'Pedestrian', 'Cyclist']        
    batch_size:             2                                       
    fg_image_ratio:         1.0                                     
    box_samples:            0.2                                     
    fg_fraction:            0.2                                     
    bg_thresh_lo:           0                                       
    bg_thresh_hi:           0.5                                     
    fg_thresh:              0.5                                     
    ign_thresh:             0.5                                     
    best_thresh:            0.35                                    
    nms_topN_pre:           3000                                    
    nms_topN_post:          40                                      
    nms_thres:              0.4                                     
    clip_boxes:             False                                   
    test_protocol:          kitti                                   
    test_db:                kitti                                   
    test_min_h:             0                                       
    min_det_scales:         [0, 0]                                  
    cluster_anchors:        0                                       
    even_anchors:           0                                       
    expand_anchors:         0                                       
    anchors:                [[1.5, -4.5, 13.5, 19.5, 51.969, 0.531,
                             1.713, 1.025, -0.799],
                            [-4.5, -4.5, 19.5, 19.5, 52.176, 1.618,
                             1.6, 3.811, -0.453],
                            [-10.5, -4.5, 25.5, 19.5, 48.334,
                             1.644, 1.529, 3.966, 0.673],
                            [-0.021, -7.541, 15.021, 22.541,
                             44.781, 0.534, 1.771, 0.971, 0.093],
                            [-7.541, -7.541, 22.541, 22.541,
                             44.704, 1.599, 1.569, 3.814, -0.187],
                            [-15.062, -7.541, 30.062, 22.541,
                             43.492, 1.621, 1.536, 3.91, 0.719],
                            [-1.927, -11.354, 16.927, 26.354,
                             34.666, 0.561, 1.752, 0.967, -0.384],
                            [-11.354, -11.354, 26.354, 26.354,
                             35.35, 1.567, 1.591, 3.81, -0.511],
                            [-20.781, -11.354, 35.781, 26.354,
                             37.128, 1.602, 1.529, 3.904, 0.452],
                            [-4.316, -16.132, 19.316, 31.132,
                             28.771, 0.613, 1.76, 0.98, 0.067],
                            [-16.132, -16.132, 31.132, 31.132,
                             28.331, 1.543, 1.592, 3.66, -0.811],
                            [-27.948, -16.132, 42.948, 31.132,
                             30.541, 1.626, 1.524, 3.908, 0.312],
                            [-7.311, -22.122, 22.311, 37.122,
                             23.011, 0.606, 1.758, 0.996, 0.208],
                            [-22.122, -22.122, 37.122, 37.122,
                             22.948, 1.51, 1.599, 3.419, -1.076],
                            [-36.933, -22.122, 51.933, 37.122,
                             25.0, 1.628, 1.527, 3.917, 0.334],
                            [-11.065, -29.629, 26.065, 44.629,
                             18.479, 0.601, 1.747, 1.007, 0.347],
                            [-29.629, -29.629, 44.629, 44.629,
                             18.815, 1.487, 1.599, 3.337, -0.862],
                            [-48.194, -29.629, 63.194, 44.629,
                             20.576, 1.623, 1.532, 3.942, 0.323],
                            [-15.77, -39.04, 30.77, 54.04, 15.035,
                             0.625, 1.744, 0.917, 0.41],
                            [-39.04, -39.04, 54.04, 54.04, 15.346,
                             1.29, 1.659, 3.083, -0.275],
                            [-62.31, -39.04, 77.31, 54.04, 16.326,
                             1.613, 1.527, 3.934, 0.268],
                            [-21.668, -50.836, 36.668, 65.836,
                             12.265, 0.631, 1.747, 0.954, 0.317],
                            [-50.836, -50.836, 65.836, 65.836,
                             11.878, 1.044, 1.67, 2.415, -0.211],
                            [-80.003, -50.836, 95.003, 65.836,
                             13.58, 1.621, 1.539, 3.961, 0.189],
                            [-29.06, -65.621, 44.06, 80.621, 9.932,
                             0.61, 1.771, 0.934, 0.486],
                            [-65.621, -65.621, 80.621, 80.621,
                             8.949, 0.811, 1.766, 1.662, 0.08],
                            [-102.181, -65.621, 117.181, 80.621,
                             11.043, 1.61, 1.533, 3.899, 0.04],
                            [-38.327, -84.153, 53.327, 99.153,
                             8.389, 0.604, 1.793, 0.95, 0.806],
                            [-84.153, -84.153, 99.153, 99.153,
                             8.071, 1.01, 1.751, 2.19, -0.076],
                            [-129.98, -84.153, 144.98, 99.153,
                             9.184, 1.606, 1.526, 3.869, -0.066],
                            [-49.941, -107.383, 64.941, 122.383,
                             6.923, 0.627, 1.791, 0.96, 0.784],
                            [-107.383, -107.383, 122.383, 122.383,
                             6.784, 1.384, 1.615, 2.862, -1.035],
                            [-164.824, -107.383, 179.824, 122.383,
                             7.863, 1.617, 1.55, 3.948, -0.071],
                            [-64.5, -136.5, 79.5, 151.5, 5.189,
                             0.66, 1.755, 0.841, 0.173],
                            [-136.5, -136.5, 151.5, 151.5, 4.388,
                             0.743, 1.728, 1.381, 0.642],
                            [-208.5, -136.5, 223.5, 151.5, 5.583,
                             1.583, 1.547, 3.862, -0.072]]
    bbox_means:             [[-0.001, 0.002, 0.063, -0.093, 0.011,
                             -0.066, 0.155, 0.058, -0.021, 0.067,
                             -0.007]]
    bbox_stds:              [[0.139, 0.125, 0.247, 0.238, 0.163,
                             0.132, 3.611, 0.383, 0.102, 0.502,
                             1.854]]
    anchor_scales:          [32.0, 40.11, 50.276, 63.019, 78.991,
                            99.012, 124.106, 155.561, 194.989,
                            244.409, 306.354, 384.0]
    anchor_ratios:          [0.5, 1.0, 1.5]                         
    hard_negatives:         True                                    
    focal_loss:             0                                       
    cls_2d_lambda:          1                                       
    iou_2d_lambda:          1                                       
    bbox_2d_lambda:         0                                       
    bbox_3d_lambda:         1                                       
    bbox_3d_proj_lambda:    0.0                                     
    hill_climbing:          True                                    
    bins:                   32                                      
    visdom_port:            8100                                    
    pretrained:             'output/kitti_3d_multi_warmup/weights/model_50000.pt'
}
[INFO]: 2024-04-17 16:22:08,207 装载完成
[INFO]: 2024-04-17 16:22:11,210 神经网络结构一览
[INFO]: 2024-04-17 16:22:13,212 DataParallel(
  (module): RPN(
    (base): Sequential(
      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu0): ReLU(inplace=True)
      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (denseblock1): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
      )
      (transition1): _Transition(
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock2): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
      )
      (transition2): _Transition(
        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock3): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer13): _DenseLayer(
          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer14): _DenseLayer(
          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer15): _DenseLayer(
          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer16): _DenseLayer(
          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer17): _DenseLayer(
          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer18): _DenseLayer(
          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer19): _DenseLayer(
          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer20): _DenseLayer(
          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer21): _DenseLayer(
          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer22): _DenseLayer(
          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer23): _DenseLayer(
          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer24): _DenseLayer(
          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
      )
      (transition3): _Transition(
        (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (denseblock4): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer13): _DenseLayer(
          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer14): _DenseLayer(
          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer15): _DenseLayer(
          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
        (denselayer16): _DenseLayer(
          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): RefConv(
            (convmap): Conv2d(4096, 4096, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=4096, bias=False)
          )
        )
      )
      (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (CDF): Sequential(
      (0): RefConv(
        (convmap): Conv2d(1048576, 1048576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1048576, bias=False)
      )
    )
    (prop_feats): Sequential(
      (0): DEConv(
        (conv1_1): Conv2d_cd(
          (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (conv1_2): Conv2d_hd(
          (conv): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
        )
        (conv1_3): Conv2d_vd(
          (conv): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
        )
        (conv1_4): Conv2d_ad(
          (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (conv1_5): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): ReLU(inplace=True)
    )
    (cls): Conv2d(1024, 144, kernel_size=(1, 1), stride=(1, 1))
    (bbox_x): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_y): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_w): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_h): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_x3d): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_y3d): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_z3d): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_w3d): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_h3d): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_l3d): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (bbox_rY3d): Conv2d(1024, 36, kernel_size=(1, 1), stride=(1, 1))
    (prop_feats_loc): Sequential(
      (0): DEConv(
        (conv1_1): Conv2d_cd(
          (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (conv1_2): Conv2d_hd(
          (conv): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
        )
        (conv1_3): Conv2d_vd(
          (conv): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
        )
        (conv1_4): Conv2d_ad(
          (conv): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (conv1_5): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Sequential(
        (0): RefConv(
          (convmap): Conv2d(1048576, 1048576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1048576, bias=False)
        )
      )
      (4): ReLU(inplace=True)
    )
    (cls_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 4608, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_x_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_y_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_w_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_h_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_x3d_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_y3d_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_z3d_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_w3d_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_h3d_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_l3d_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (bbox_rY3d_loc): LocalConv2d(
      (group_conv): Conv2d(32768, 1152, kernel_size=(1, 1), stride=(1, 1), groups=32)
    )
    (sigmoid): Sigmoid()
    (softmax): Softmax(dim=1)
  )
)
[INFO]: 2024-04-17 16:22:13,243 使用预训练模型: output/kitti_3d_multi_warmup/weights/model_50000.pt
[INFO]: 2024-04-17 16:25:27,821 iter: 250, acc (bg: 1.00, fg: 0.93, iou: 0.83), loss (bbox_3d: 0.5335, cls: 0.0875, iou: 0.1858), misc (ry: 0.52, z: 1.30), dt: 0.78, eta: 10.8h
[INFO]: 2024-04-17 16:28:33,040 iter: 500, acc (bg: 1.00, fg: 0.95, iou: 0.84), loss (bbox_3d: 0.4925, cls: 0.0737, iou: 0.1786), misc (ry: 0.53, z: 1.04), dt: 0.76, eta: 10.5h
[INFO]: 2024-04-17 16:31:38,218 iter: 750, acc (bg: 1.00, fg: 0.92, iou: 0.82), loss (bbox_3d: 0.6111, cls: 0.1102, iou: 0.2022), misc (ry: 0.64, z: 1.17), dt: 0.75, eta: 10.3h
[INFO]: 2024-04-17 16:34:44,044 iter: 1000, acc (bg: 1.00, fg: 0.94, iou: 0.84), loss (bbox_3d: 0.5019, cls: 0.0841, iou: 0.1819), misc (ry: 0.53, z: 1.00), dt: 0.75, eta: 10.2h
[INFO]: 2024-04-17 16:37:51,359 iter: 1250, acc (bg: 1.00, fg: 0.95, iou: 0.84), loss (bbox_3d: 0.4564, cls: 0.0750, iou: 0.1740), misc (ry: 0.44, z: 1.01), dt: 0.75, eta: 10.2h
[INFO]: 2024-04-17 16:40:56,882 iter: 1500, acc (bg: 1.00, fg: 0.95, iou: 0.85), loss (bbox_3d: 0.4388, cls: 0.0706, iou: 0.1683), misc (ry: 0.46, z: 0.93), dt: 0.75, eta: 10.1h
[INFO]: 2024-04-17 16:44:08,044 iter: 1750, acc (bg: 1.00, fg: 0.96, iou: 0.86), loss (bbox_3d: 0.3696, cls: 0.0652, iou: 0.1605), misc (ry: 0.41, z: 0.91), dt: 0.75, eta: 10.1h
[INFO]: 2024-04-17 16:47:16,634 iter: 2000, acc (bg: 1.00, fg: 0.96, iou: 0.85), loss (bbox_3d: 0.3760, cls: 0.0644, iou: 0.1626), misc (ry: 0.43, z: 0.79), dt: 0.75, eta: 10.0h
[INFO]: 2024-04-17 16:50:28,313 iter: 2250, acc (bg: 1.00, fg: 0.96, iou: 0.87), loss (bbox_3d: 0.3124, cls: 0.0593, iou: 0.1477), misc (ry: 0.37, z: 0.83), dt: 0.75, eta: 10.0h
[INFO]: 2024-04-17 16:53:36,003 iter: 2500, acc (bg: 1.00, fg: 0.97, iou: 0.87), loss (bbox_3d: 0.2992, cls: 0.0533, iou: 0.1462), misc (ry: 0.34, z: 0.75), dt: 0.75, eta: 9.9h
[INFO]: 2024-04-17 16:56:45,834 iter: 2750, acc (bg: 1.00, fg: 0.97, iou: 0.87), loss (bbox_3d: 0.2891, cls: 0.0537, iou: 0.1429), misc (ry: 0.36, z: 0.68), dt: 0.75, eta: 9.9h
[INFO]: 2024-04-17 16:59:58,161 iter: 3000, acc (bg: 1.00, fg: 0.97, iou: 0.87), loss (bbox_3d: 0.2864, cls: 0.0568, iou: 0.1453), misc (ry: 0.37, z: 0.70), dt: 0.76, eta: 9.9h
[INFO]: 2024-04-17 17:03:07,253 iter: 3250, acc (bg: 1.00, fg: 0.97, iou: 0.87), loss (bbox_3d: 0.2852, cls: 0.0557, iou: 0.1446), misc (ry: 0.33, z: 0.75), dt: 0.76, eta: 9.8h
[INFO]: 2024-04-17 17:06:16,718 iter: 3500, acc (bg: 1.00, fg: 0.97, iou: 0.87), loss (bbox_3d: 0.2872, cls: 0.0515, iou: 0.1436), misc (ry: 0.33, z: 0.78), dt: 0.76, eta: 9.8h
[INFO]: 2024-04-17 17:09:23,749 iter: 3750, acc (bg: 1.00, fg: 0.95, iou: 0.86), loss (bbox_3d: 0.3719, cls: 0.0669, iou: 0.1607), misc (ry: 0.45, z: 0.80), dt: 0.75, eta: 9.7h
[INFO]: 2024-04-17 17:12:30,891 iter: 4000, acc (bg: 1.00, fg: 0.96, iou: 0.86), loss (bbox_3d: 0.3960, cls: 0.0662, iou: 0.1576), misc (ry: 0.51, z: 0.84), dt: 0.75, eta: 9.6h
[INFO]: 2024-04-17 17:15:42,394 iter: 4250, acc (bg: 1.00, fg: 0.96, iou: 0.86), loss (bbox_3d: 0.3456, cls: 0.0636, iou: 0.1528), misc (ry: 0.41, z: 0.78), dt: 0.76, eta: 9.6h
[INFO]: 2024-04-17 17:18:54,691 iter: 4500, acc (bg: 1.00, fg: 0.96, iou: 0.86), loss (bbox_3d: 0.3557, cls: 0.0637, iou: 0.1551), misc (ry: 0.47, z: 0.78), dt: 0.76, eta: 9.6h
[INFO]: 2024-04-17 17:22:06,273 iter: 4750, acc (bg: 1.00, fg: 0.96, iou: 0.86), loss (bbox_3d: 0.3493, cls: 0.0629, iou: 0.1530), misc (ry: 0.43, z: 0.73), dt: 0.76, eta: 9.5h
[INFO]: 2024-04-17 17:25:16,401 iter: 5000, acc (bg: 1.00, fg: 0.97, iou: 0.87), loss (bbox_3d: 0.2732, cls: 0.0525, iou: 0.1430), misc (ry: 0.36, z: 0.70), dt: 0.76, eta: 9.5h
[INFO]: 2024-04-17 17:28:28,761 iter: 5250, acc (bg: 1.00, fg: 0.98, iou: 0.88), loss (bbox_3d: 0.2627, cls: 0.0466, iou: 0.1358), misc (ry: 0.29, z: 0.73), dt: 0.76, eta: 9.4h
[INFO]: 2024-04-17 17:31:38,328 iter: 5500, acc (bg: 1.00, fg: 0.97, iou: 0.87), loss (bbox_3d: 0.2742, cls: 0.0501, iou: 0.1406), misc (ry: 0.38, z: 0.72), dt: 0.76, eta: 9.4h
[INFO]: 2024-04-17 17:34:45,150 iter: 5750, acc (bg: 1.00, fg: 0.97, iou: 0.88), loss (bbox_3d: 0.2492, cls: 0.0535, iou: 0.1358), misc (ry: 0.30, z: 0.65), dt: 0.76, eta: 9.3h
[INFO]: 2024-04-17 17:37:57,139 iter: 6000, acc (bg: 1.00, fg: 0.98, iou: 0.88), loss (bbox_3d: 0.2274, cls: 0.0458, iou: 0.1324), misc (ry: 0.28, z: 0.70), dt: 0.76, eta: 9.3h
[INFO]: 2024-04-17 17:41:01,502 iter: 6250, acc (bg: 1.00, fg: 0.98, iou: 0.88), loss (bbox_3d: 0.2347, cls: 0.0454, iou: 0.1342), misc (ry: 0.32, z: 0.65), dt: 0.76, eta: 9.2h
[INFO]: 2024-04-17 17:44:09,058 iter: 6500, acc (bg: 1.00, fg: 0.97, iou: 0.88), loss (bbox_3d: 0.2160, cls: 0.0508, iou: 0.1304), misc (ry: 0.28, z: 0.61), dt: 0.76, eta: 9.1h
[INFO]: 2024-04-17 17:47:16,716 iter: 6750, acc (bg: 1.00, fg: 0.98, iou: 0.88), loss (bbox_3d: 0.2029, cls: 0.0425, iou: 0.1287), misc (ry: 0.28, z: 0.62), dt: 0.76, eta: 9.1h
[INFO]: 2024-04-17 17:50:21,172 iter: 7000, acc (bg: 1.00, fg: 0.98, iou: 0.88), loss (bbox_3d: 0.2175, cls: 0.0446, iou: 0.1317), misc (ry: 0.28, z: 0.63), dt: 0.76, eta: 9.0h
[INFO]: 2024-04-17 17:53:28,878 iter: 7250, acc (bg: 1.00, fg: 0.98, iou: 0.88), loss (bbox_3d: 0.2140, cls: 0.0453, iou: 0.1281), misc (ry: 0.29, z: 0.60), dt: 0.76, eta: 9.0h
[INFO]: 2024-04-17 17:56:33,780 iter: 7500, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1849, cls: 0.0425, iou: 0.1245), misc (ry: 0.25, z: 0.56), dt: 0.75, eta: 8.9h
[INFO]: 2024-04-17 17:59:38,493 iter: 7750, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1776, cls: 0.0417, iou: 0.1171), misc (ry: 0.24, z: 0.59), dt: 0.75, eta: 8.9h
[INFO]: 2024-04-17 18:02:45,366 iter: 8000, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1689, cls: 0.0399, iou: 0.1170), misc (ry: 0.24, z: 0.52), dt: 0.75, eta: 8.8h
[INFO]: 2024-04-17 18:05:53,008 iter: 8250, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1743, cls: 0.0426, iou: 0.1180), misc (ry: 0.25, z: 0.54), dt: 0.75, eta: 8.7h
[INFO]: 2024-04-17 18:08:59,435 iter: 8500, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1721, cls: 0.0405, iou: 0.1182), misc (ry: 0.22, z: 0.57), dt: 0.75, eta: 8.7h
[INFO]: 2024-04-17 18:12:01,850 iter: 8750, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1604, cls: 0.0369, iou: 0.1159), misc (ry: 0.22, z: 0.58), dt: 0.75, eta: 8.6h
[INFO]: 2024-04-17 18:15:11,625 iter: 9000, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1579, cls: 0.0381, iou: 0.1170), misc (ry: 0.23, z: 0.53), dt: 0.75, eta: 8.6h
[INFO]: 2024-04-17 18:18:17,559 iter: 9250, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1683, cls: 0.0398, iou: 0.1193), misc (ry: 0.24, z: 0.55), dt: 0.75, eta: 8.5h
[INFO]: 2024-04-17 18:21:28,856 iter: 9500, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1665, cls: 0.0380, iou: 0.1150), misc (ry: 0.22, z: 0.63), dt: 0.75, eta: 8.5h
[INFO]: 2024-04-17 18:24:34,357 iter: 9750, acc (bg: 1.00, fg: 0.98, iou: 0.90), loss (bbox_3d: 0.1458, cls: 0.0366, iou: 0.1119), misc (ry: 0.21, z: 0.53), dt: 0.75, eta: 8.4h
[INFO]: 2024-04-17 18:27:37,321 iter: 10000, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1720, cls: 0.0388, iou: 0.1144), misc (ry: 0.30, z: 0.52), dt: 0.75, eta: 8.4h
[INFO]: 2024-04-17 18:38:14,687 test_iter 10000 2d car --> easy: 0.9508, mod: 0.8397, hard: 0.6910
[INFO]: 2024-04-17 18:38:14,687 test_iter 10000 gr car --> easy: 0.1704, mod: 0.1203, hard: 0.0975
[INFO]: 2024-04-17 18:38:14,688 test_iter 10000 3d car --> easy: 0.0696, mod: 0.0504, hard: 0.0477
[INFO]: 2024-04-17 18:38:14,688 test_iter 10000 2d pedestrian --> easy: 0.6275, mod: 0.5482, hard: 0.4692
[INFO]: 2024-04-17 18:38:14,689 test_iter 10000 gr pedestrian --> easy: 0.0422, mod: 0.0356, hard: 0.0354
[INFO]: 2024-04-17 18:38:14,689 test_iter 10000 3d pedestrian --> easy: 0.0395, mod: 0.0351, hard: 0.0303
[INFO]: 2024-04-17 18:38:14,690 test_iter 10000 2d cyclist --> easy: 0.6009, mod: 0.4432, hard: 0.4023
[INFO]: 2024-04-17 18:38:14,690 test_iter 10000 gr cyclist --> easy: 0.0284, mod: 0.0227, hard: 0.0227
[INFO]: 2024-04-17 18:38:14,691 test_iter 10000 3d cyclist --> easy: 0.0273, mod: 0.0227, hard: 0.0227
[INFO]: 2024-04-17 18:41:18,553 iter: 10250, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1656, cls: 0.0382, iou: 0.1143), misc (ry: 0.29, z: 0.54), dt: 0.81, eta: 9.0h
[INFO]: 2024-04-17 18:44:20,541 iter: 10500, acc (bg: 1.00, fg: 0.98, iou: 0.89), loss (bbox_3d: 0.1705, cls: 0.0404, iou: 0.1194), misc (ry: 0.27, z: 0.54), dt: 0.81, eta: 8.9h
[INFO]: 2024-04-17 18:47:22,777 iter: 10750, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1322, cls: 0.0350, iou: 0.1070), misc (ry: 0.20, z: 0.46), dt: 0.81, eta: 8.8h
[INFO]: 2024-04-17 18:50:29,375 iter: 11000, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1286, cls: 0.0350, iou: 0.1045), misc (ry: 0.20, z: 0.47), dt: 0.81, eta: 8.8h
[INFO]: 2024-04-17 18:53:31,800 iter: 11250, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1316, cls: 0.0346, iou: 0.1085), misc (ry: 0.20, z: 0.50), dt: 0.81, eta: 8.7h
[INFO]: 2024-04-17 18:56:37,918 iter: 11500, acc (bg: 1.00, fg: 0.98, iou: 0.90), loss (bbox_3d: 0.1278, cls: 0.0364, iou: 0.1072), misc (ry: 0.18, z: 0.47), dt: 0.81, eta: 8.6h
[INFO]: 2024-04-17 18:59:40,916 iter: 11750, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1310, cls: 0.0354, iou: 0.1057), misc (ry: 0.19, z: 0.48), dt: 0.80, eta: 8.5h
[INFO]: 2024-04-17 19:02:46,993 iter: 12000, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1241, cls: 0.0327, iou: 0.1029), misc (ry: 0.19, z: 0.48), dt: 0.80, eta: 8.5h
[INFO]: 2024-04-17 19:05:56,074 iter: 12250, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1514, cls: 0.0353, iou: 0.1082), misc (ry: 0.26, z: 0.49), dt: 0.80, eta: 8.4h
[INFO]: 2024-04-17 19:09:02,800 iter: 12500, acc (bg: 1.00, fg: 0.98, iou: 0.90), loss (bbox_3d: 0.1344, cls: 0.0349, iou: 0.1066), misc (ry: 0.22, z: 0.47), dt: 0.80, eta: 8.3h
[INFO]: 2024-04-17 19:12:11,545 iter: 12750, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1351, cls: 0.0337, iou: 0.1035), misc (ry: 0.23, z: 0.50), dt: 0.80, eta: 8.3h
[INFO]: 2024-04-17 19:15:16,453 iter: 13000, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1226, cls: 0.0335, iou: 0.1029), misc (ry: 0.20, z: 0.44), dt: 0.80, eta: 8.2h
[INFO]: 2024-04-17 19:18:24,252 iter: 13250, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1266, cls: 0.0340, iou: 0.1038), misc (ry: 0.19, z: 0.48), dt: 0.80, eta: 8.1h
[INFO]: 2024-04-17 19:21:30,883 iter: 13500, acc (bg: 1.00, fg: 0.98, iou: 0.90), loss (bbox_3d: 0.1490, cls: 0.0367, iou: 0.1090), misc (ry: 0.24, z: 0.52), dt: 0.80, eta: 8.1h
[INFO]: 2024-04-17 19:24:41,114 iter: 13750, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1591, cls: 0.0344, iou: 0.1104), misc (ry: 0.28, z: 0.49), dt: 0.80, eta: 8.0h
[INFO]: 2024-04-17 19:27:48,652 iter: 14000, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1272, cls: 0.0311, iou: 0.1026), misc (ry: 0.22, z: 0.46), dt: 0.80, eta: 8.0h
[INFO]: 2024-04-17 19:30:54,464 iter: 14250, acc (bg: 1.00, fg: 0.98, iou: 0.90), loss (bbox_3d: 0.1341, cls: 0.0360, iou: 0.1068), misc (ry: 0.21, z: 0.49), dt: 0.79, eta: 7.9h
[INFO]: 2024-04-17 19:33:59,550 iter: 14500, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1301, cls: 0.0345, iou: 0.1079), misc (ry: 0.22, z: 0.50), dt: 0.79, eta: 7.8h
[INFO]: 2024-04-17 19:37:10,129 iter: 14750, acc (bg: 1.00, fg: 0.98, iou: 0.90), loss (bbox_3d: 0.1646, cls: 0.0378, iou: 0.1122), misc (ry: 0.26, z: 0.55), dt: 0.79, eta: 7.8h
[INFO]: 2024-04-17 19:40:18,660 iter: 15000, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1247, cls: 0.0338, iou: 0.1022), misc (ry: 0.19, z: 0.49), dt: 0.79, eta: 7.7h
[INFO]: 2024-04-17 19:43:24,224 iter: 15250, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1254, cls: 0.0331, iou: 0.1032), misc (ry: 0.18, z: 0.49), dt: 0.79, eta: 7.6h
[INFO]: 2024-04-17 19:46:30,539 iter: 15500, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1257, cls: 0.0327, iou: 0.1030), misc (ry: 0.20, z: 0.47), dt: 0.79, eta: 7.6h
[INFO]: 2024-04-17 19:49:38,285 iter: 15750, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1385, cls: 0.0327, iou: 0.1046), misc (ry: 0.24, z: 0.47), dt: 0.79, eta: 7.5h
[INFO]: 2024-04-17 19:52:45,655 iter: 16000, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1085, cls: 0.0295, iou: 0.0978), misc (ry: 0.18, z: 0.45), dt: 0.79, eta: 7.5h
[INFO]: 2024-04-17 19:55:51,435 iter: 16250, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1137, cls: 0.0309, iou: 0.0989), misc (ry: 0.20, z: 0.49), dt: 0.79, eta: 7.4h
[INFO]: 2024-04-17 19:58:57,372 iter: 16500, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0980, cls: 0.0312, iou: 0.0970), misc (ry: 0.18, z: 0.42), dt: 0.79, eta: 7.3h
[INFO]: 2024-04-17 20:02:05,721 iter: 16750, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1066, cls: 0.0302, iou: 0.0959), misc (ry: 0.19, z: 0.46), dt: 0.79, eta: 7.3h
[INFO]: 2024-04-17 20:05:18,204 iter: 17000, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1164, cls: 0.0306, iou: 0.1006), misc (ry: 0.19, z: 0.48), dt: 0.79, eta: 7.2h
[INFO]: 2024-04-17 20:08:21,285 iter: 17250, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1123, cls: 0.0305, iou: 0.0981), misc (ry: 0.17, z: 0.46), dt: 0.79, eta: 7.2h
[INFO]: 2024-04-17 20:11:28,311 iter: 17500, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1570, cls: 0.0325, iou: 0.1045), misc (ry: 0.31, z: 0.47), dt: 0.79, eta: 7.1h
[INFO]: 2024-04-17 20:14:36,095 iter: 17750, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1274, cls: 0.0303, iou: 0.0986), misc (ry: 0.22, z: 0.50), dt: 0.79, eta: 7.0h
[INFO]: 2024-04-17 20:17:43,026 iter: 18000, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1057, cls: 0.0323, iou: 0.1000), misc (ry: 0.18, z: 0.42), dt: 0.79, eta: 7.0h
[INFO]: 2024-04-17 20:20:50,921 iter: 18250, acc (bg: 1.00, fg: 0.99, iou: 0.90), loss (bbox_3d: 0.1226, cls: 0.0332, iou: 0.1026), misc (ry: 0.19, z: 0.47), dt: 0.78, eta: 6.9h
[INFO]: 2024-04-17 20:24:05,776 iter: 18500, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1112, cls: 0.0315, iou: 0.0978), misc (ry: 0.18, z: 0.45), dt: 0.78, eta: 6.9h
[INFO]: 2024-04-17 20:27:11,557 iter: 18750, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1006, cls: 0.0297, iou: 0.0917), misc (ry: 0.19, z: 0.42), dt: 0.78, eta: 6.8h
[INFO]: 2024-04-17 20:30:20,209 iter: 19000, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1001, cls: 0.0302, iou: 0.0927), misc (ry: 0.19, z: 0.40), dt: 0.78, eta: 6.7h
[INFO]: 2024-04-17 20:33:29,142 iter: 19250, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0942, cls: 0.0310, iou: 0.0921), misc (ry: 0.18, z: 0.40), dt: 0.78, eta: 6.7h
[INFO]: 2024-04-17 20:36:36,806 iter: 19500, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0974, cls: 0.0294, iou: 0.0913), misc (ry: 0.19, z: 0.41), dt: 0.78, eta: 6.6h
[INFO]: 2024-04-17 20:39:44,685 iter: 19750, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0948, cls: 0.0296, iou: 0.0914), misc (ry: 0.17, z: 0.40), dt: 0.78, eta: 6.6h
[INFO]: 2024-04-17 20:42:52,388 iter: 20000, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0921, cls: 0.0287, iou: 0.0928), misc (ry: 0.17, z: 0.42), dt: 0.78, eta: 6.5h
[INFO]: 2024-04-17 20:53:31,338 test_iter 20000 2d car --> easy: 0.9462, mod: 0.8592, hard: 0.6947
[INFO]: 2024-04-17 20:53:31,340 test_iter 20000 gr car --> easy: 0.2299, mod: 0.1730, hard: 0.1576
[INFO]: 2024-04-17 20:53:31,340 test_iter 20000 3d car --> easy: 0.1778, mod: 0.1466, hard: 0.1247
[INFO]: 2024-04-17 20:53:31,341 test_iter 20000 2d pedestrian --> easy: 0.7150, mod: 0.6349, hard: 0.5532
[INFO]: 2024-04-17 20:53:31,342 test_iter 20000 gr pedestrian --> easy: 0.0614, mod: 0.0602, hard: 0.0545
[INFO]: 2024-04-17 20:53:31,342 test_iter 20000 3d pedestrian --> easy: 0.0587, mod: 0.0561, hard: 0.0536
[INFO]: 2024-04-17 20:53:31,343 test_iter 20000 2d cyclist --> easy: 0.6507, mod: 0.4085, hard: 0.4051
[INFO]: 2024-04-17 20:53:31,343 test_iter 20000 gr cyclist --> easy: 0.0281, mod: 0.0147, hard: 0.0152
[INFO]: 2024-04-17 20:53:31,344 test_iter 20000 3d cyclist --> easy: 0.0214, mod: 0.0129, hard: 0.0118
[INFO]: 2024-04-17 20:56:37,896 iter: 20250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0850, cls: 0.0269, iou: 0.0865), misc (ry: 0.16, z: 0.40), dt: 0.81, eta: 6.7h
[INFO]: 2024-04-17 20:59:46,747 iter: 20500, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0874, cls: 0.0286, iou: 0.0888), misc (ry: 0.16, z: 0.42), dt: 0.81, eta: 6.7h
[INFO]: 2024-04-17 21:02:55,885 iter: 20750, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0951, cls: 0.0281, iou: 0.0909), misc (ry: 0.18, z: 0.45), dt: 0.81, eta: 6.6h
[INFO]: 2024-04-17 21:06:03,043 iter: 21000, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0970, cls: 0.0292, iou: 0.0922), misc (ry: 0.20, z: 0.42), dt: 0.81, eta: 6.5h
[INFO]: 2024-04-17 21:09:10,189 iter: 21250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0763, cls: 0.0266, iou: 0.0868), misc (ry: 0.15, z: 0.37), dt: 0.81, eta: 6.5h
[INFO]: 2024-04-17 21:12:15,897 iter: 21500, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.0938, cls: 0.0295, iou: 0.0949), misc (ry: 0.17, z: 0.40), dt: 0.81, eta: 6.4h
[INFO]: 2024-04-17 21:15:24,548 iter: 21750, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0841, cls: 0.0280, iou: 0.0857), misc (ry: 0.16, z: 0.40), dt: 0.81, eta: 6.3h
[INFO]: 2024-04-17 21:18:34,794 iter: 22000, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0756, cls: 0.0263, iou: 0.0838), misc (ry: 0.14, z: 0.39), dt: 0.81, eta: 6.3h
[INFO]: 2024-04-17 21:21:42,087 iter: 22250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0936, cls: 0.0301, iou: 0.0908), misc (ry: 0.19, z: 0.41), dt: 0.81, eta: 6.2h
[INFO]: 2024-04-17 21:24:50,230 iter: 22500, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0894, cls: 0.0277, iou: 0.0872), misc (ry: 0.16, z: 0.44), dt: 0.81, eta: 6.2h
[INFO]: 2024-04-17 21:27:58,618 iter: 22750, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0753, cls: 0.0269, iou: 0.0838), misc (ry: 0.15, z: 0.36), dt: 0.81, eta: 6.1h
[INFO]: 2024-04-17 21:31:05,821 iter: 23000, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0854, cls: 0.0286, iou: 0.0896), misc (ry: 0.16, z: 0.42), dt: 0.81, eta: 6.0h
[INFO]: 2024-04-17 21:34:15,332 iter: 23250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0842, cls: 0.0274, iou: 0.0869), misc (ry: 0.17, z: 0.39), dt: 0.81, eta: 6.0h
[INFO]: 2024-04-17 21:37:23,456 iter: 23500, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0855, cls: 0.0258, iou: 0.0844), misc (ry: 0.15, z: 0.44), dt: 0.80, eta: 5.9h
[INFO]: 2024-04-17 21:40:33,836 iter: 23750, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0847, cls: 0.0273, iou: 0.0852), misc (ry: 0.16, z: 0.43), dt: 0.80, eta: 5.9h
[INFO]: 2024-04-17 21:43:41,436 iter: 24000, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0775, cls: 0.0273, iou: 0.0842), misc (ry: 0.16, z: 0.37), dt: 0.80, eta: 5.8h
[INFO]: 2024-04-17 21:46:47,424 iter: 24250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0830, cls: 0.0260, iou: 0.0827), misc (ry: 0.15, z: 0.43), dt: 0.80, eta: 5.7h
[INFO]: 2024-04-17 21:49:52,914 iter: 24500, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0715, cls: 0.0265, iou: 0.0820), misc (ry: 0.14, z: 0.37), dt: 0.80, eta: 5.7h
[INFO]: 2024-04-17 21:53:03,424 iter: 24750, acc (bg: 1.00, fg: 0.98, iou: 0.91), loss (bbox_3d: 0.1258, cls: 0.0319, iou: 0.0939), misc (ry: 0.23, z: 0.45), dt: 0.80, eta: 5.6h
[INFO]: 2024-04-17 21:56:11,781 iter: 25000, acc (bg: 1.00, fg: 0.98, iou: 0.91), loss (bbox_3d: 0.1559, cls: 0.0339, iou: 0.1015), misc (ry: 0.29, z: 0.47), dt: 0.80, eta: 5.6h
[INFO]: 2024-04-17 21:59:20,919 iter: 25250, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1455, cls: 0.0314, iou: 0.0999), misc (ry: 0.31, z: 0.46), dt: 0.80, eta: 5.5h
[INFO]: 2024-04-17 22:02:29,220 iter: 25500, acc (bg: 1.00, fg: 0.99, iou: 0.91), loss (bbox_3d: 0.1017, cls: 0.0297, iou: 0.0914), misc (ry: 0.19, z: 0.40), dt: 0.80, eta: 5.4h
[INFO]: 2024-04-17 22:05:41,623 iter: 25750, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.1125, cls: 0.0285, iou: 0.0894), misc (ry: 0.24, z: 0.40), dt: 0.80, eta: 5.4h
[INFO]: 2024-04-17 22:08:47,484 iter: 26000, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0907, cls: 0.0282, iou: 0.0882), misc (ry: 0.18, z: 0.39), dt: 0.80, eta: 5.3h
[INFO]: 2024-04-17 22:11:57,174 iter: 26250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0793, cls: 0.0261, iou: 0.0847), misc (ry: 0.17, z: 0.35), dt: 0.80, eta: 5.3h
[INFO]: 2024-04-17 22:15:06,769 iter: 26500, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0875, cls: 0.0286, iou: 0.0870), misc (ry: 0.16, z: 0.40), dt: 0.80, eta: 5.2h
[INFO]: 2024-04-17 22:18:12,917 iter: 26750, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0728, cls: 0.0249, iou: 0.0804), misc (ry: 0.15, z: 0.37), dt: 0.80, eta: 5.2h
[INFO]: 2024-04-17 22:21:23,992 iter: 27000, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0718, cls: 0.0257, iou: 0.0826), misc (ry: 0.15, z: 0.38), dt: 0.80, eta: 5.1h
[INFO]: 2024-04-17 22:24:32,655 iter: 27250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0695, cls: 0.0259, iou: 0.0815), misc (ry: 0.14, z: 0.36), dt: 0.80, eta: 5.0h
[INFO]: 2024-04-17 22:27:38,175 iter: 27500, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0729, cls: 0.0259, iou: 0.0801), misc (ry: 0.16, z: 0.35), dt: 0.80, eta: 5.0h
[INFO]: 2024-04-17 22:30:43,651 iter: 27750, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0690, cls: 0.0251, iou: 0.0795), misc (ry: 0.16, z: 0.34), dt: 0.80, eta: 4.9h
[INFO]: 2024-04-17 22:33:51,746 iter: 28000, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0716, cls: 0.0258, iou: 0.0792), misc (ry: 0.15, z: 0.34), dt: 0.80, eta: 4.9h
[INFO]: 2024-04-17 22:36:59,377 iter: 28250, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0692, cls: 0.0251, iou: 0.0795), misc (ry: 0.15, z: 0.36), dt: 0.80, eta: 4.8h
[INFO]: 2024-04-17 22:40:10,943 iter: 28500, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0731, cls: 0.0264, iou: 0.0801), misc (ry: 0.16, z: 0.34), dt: 0.80, eta: 4.8h
[INFO]: 2024-04-17 22:43:20,495 iter: 28750, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0696, cls: 0.0246, iou: 0.0783), misc (ry: 0.15, z: 0.34), dt: 0.80, eta: 4.7h
[INFO]: 2024-04-17 22:46:31,675 iter: 29000, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0710, cls: 0.0270, iou: 0.0815), misc (ry: 0.15, z: 0.35), dt: 0.80, eta: 4.6h
[INFO]: 2024-04-17 22:49:39,440 iter: 29250, acc (bg: 1.00, fg: 0.99, iou: 0.92), loss (bbox_3d: 0.0713, cls: 0.0261, iou: 0.0808), misc (ry: 0.15, z: 0.36), dt: 0.79, eta: 4.6h
[INFO]: 2024-04-17 22:52:48,684 iter: 29500, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0762, cls: 0.0269, iou: 0.0797), misc (ry: 0.16, z: 0.37), dt: 0.79, eta: 4.5h
[INFO]: 2024-04-17 22:56:01,318 iter: 29750, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0671, cls: 0.0246, iou: 0.0783), misc (ry: 0.15, z: 0.35), dt: 0.79, eta: 4.5h
[INFO]: 2024-04-17 22:59:09,235 iter: 30000, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0717, cls: 0.0258, iou: 0.0783), misc (ry: 0.16, z: 0.36), dt: 0.79, eta: 4.4h
[INFO]: 2024-04-17 23:09:44,938 test_iter 30000 2d car --> easy: 0.9551, mod: 0.8647, hard: 0.6990
[INFO]: 2024-04-17 23:09:44,939 test_iter 30000 gr car --> easy: 0.2238, mod: 0.1860, hard: 0.1551
[INFO]: 2024-04-17 23:09:44,940 test_iter 30000 3d car --> easy: 0.1512, mod: 0.1310, hard: 0.1163
[INFO]: 2024-04-17 23:09:44,941 test_iter 30000 2d pedestrian --> easy: 0.7359, mod: 0.6584, hard: 0.5757
[INFO]: 2024-04-17 23:09:44,941 test_iter 30000 gr pedestrian --> easy: 0.0467, mod: 0.0462, hard: 0.0395
[INFO]: 2024-04-17 23:09:44,942 test_iter 30000 3d pedestrian --> easy: 0.0438, mod: 0.0382, hard: 0.0383
[INFO]: 2024-04-17 23:09:44,942 test_iter 30000 2d cyclist --> easy: 0.6569, mod: 0.4665, hard: 0.4030
[INFO]: 2024-04-17 23:09:44,943 test_iter 30000 gr cyclist --> easy: 0.0312, mod: 0.0243, hard: 0.0236
[INFO]: 2024-04-17 23:09:44,943 test_iter 30000 3d cyclist --> easy: 0.0284, mod: 0.0223, hard: 0.0227
[INFO]: 2024-04-17 23:12:54,108 iter: 30250, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0621, cls: 0.0246, iou: 0.0778), misc (ry: 0.15, z: 0.33), dt: 0.81, eta: 4.5h
[INFO]: 2024-04-17 23:16:03,693 iter: 30500, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0669, cls: 0.0250, iou: 0.0782), misc (ry: 0.14, z: 0.35), dt: 0.81, eta: 4.4h
[INFO]: 2024-04-17 23:19:11,877 iter: 30750, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0685, cls: 0.0256, iou: 0.0757), misc (ry: 0.17, z: 0.33), dt: 0.81, eta: 4.4h
[INFO]: 2024-04-17 23:22:19,422 iter: 31000, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0538, cls: 0.0234, iou: 0.0715), misc (ry: 0.13, z: 0.31), dt: 0.81, eta: 4.3h
[INFO]: 2024-04-17 23:25:26,080 iter: 31250, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0629, cls: 0.0245, iou: 0.0738), misc (ry: 0.14, z: 0.33), dt: 0.81, eta: 4.2h
[INFO]: 2024-04-17 23:28:34,777 iter: 31500, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0622, cls: 0.0239, iou: 0.0742), misc (ry: 0.14, z: 0.33), dt: 0.81, eta: 4.2h
[INFO]: 2024-04-17 23:31:41,591 iter: 31750, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0579, cls: 0.0228, iou: 0.0738), misc (ry: 0.13, z: 0.35), dt: 0.81, eta: 4.1h
[INFO]: 2024-04-17 23:34:50,656 iter: 32000, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0549, cls: 0.0230, iou: 0.0724), misc (ry: 0.13, z: 0.31), dt: 0.81, eta: 4.1h
[INFO]: 2024-04-17 23:37:58,982 iter: 32250, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0538, cls: 0.0226, iou: 0.0716), misc (ry: 0.13, z: 0.32), dt: 0.81, eta: 4.0h
[INFO]: 2024-04-17 23:41:07,097 iter: 32500, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0512, cls: 0.0229, iou: 0.0685), misc (ry: 0.12, z: 0.33), dt: 0.81, eta: 3.9h
[INFO]: 2024-04-17 23:44:17,362 iter: 32750, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0573, cls: 0.0228, iou: 0.0700), misc (ry: 0.13, z: 0.33), dt: 0.81, eta: 3.9h
[INFO]: 2024-04-17 23:47:26,818 iter: 33000, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0533, cls: 0.0228, iou: 0.0699), misc (ry: 0.13, z: 0.31), dt: 0.81, eta: 3.8h
[INFO]: 2024-04-17 23:50:33,029 iter: 33250, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0542, cls: 0.0238, iou: 0.0711), misc (ry: 0.13, z: 0.32), dt: 0.81, eta: 3.8h
[INFO]: 2024-04-17 23:53:37,952 iter: 33500, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0547, cls: 0.0237, iou: 0.0709), misc (ry: 0.12, z: 0.33), dt: 0.81, eta: 3.7h
[INFO]: 2024-04-17 23:56:48,493 iter: 33750, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0519, cls: 0.0237, iou: 0.0691), misc (ry: 0.12, z: 0.30), dt: 0.81, eta: 3.6h
[INFO]: 2024-04-17 23:59:58,468 iter: 34000, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0494, cls: 0.0229, iou: 0.0689), misc (ry: 0.12, z: 0.30), dt: 0.81, eta: 3.6h
[INFO]: 2024-04-18 00:03:04,868 iter: 34250, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0450, cls: 0.0210, iou: 0.0663), misc (ry: 0.12, z: 0.27), dt: 0.81, eta: 3.5h
[INFO]: 2024-04-18 00:06:12,484 iter: 34500, acc (bg: 1.00, fg: 0.99, iou: 0.93), loss (bbox_3d: 0.0536, cls: 0.0256, iou: 0.0711), misc (ry: 0.13, z: 0.29), dt: 0.81, eta: 3.5h
[INFO]: 2024-04-18 00:09:23,985 iter: 34750, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0496, cls: 0.0216, iou: 0.0666), misc (ry: 0.12, z: 0.30), dt: 0.81, eta: 3.4h
[INFO]: 2024-04-18 00:12:34,517 iter: 35000, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0518, cls: 0.0233, iou: 0.0684), misc (ry: 0.13, z: 0.29), dt: 0.81, eta: 3.4h
[INFO]: 2024-04-18 00:15:45,648 iter: 35250, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0446, cls: 0.0221, iou: 0.0648), misc (ry: 0.12, z: 0.27), dt: 0.81, eta: 3.3h
[INFO]: 2024-04-18 00:18:58,545 iter: 35500, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0456, cls: 0.0221, iou: 0.0656), misc (ry: 0.12, z: 0.27), dt: 0.81, eta: 3.2h
[INFO]: 2024-04-18 00:22:06,547 iter: 35750, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0454, cls: 0.0223, iou: 0.0647), misc (ry: 0.12, z: 0.28), dt: 0.81, eta: 3.2h
[INFO]: 2024-04-18 00:25:15,996 iter: 36000, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0469, cls: 0.0215, iou: 0.0645), misc (ry: 0.12, z: 0.29), dt: 0.81, eta: 3.1h
[INFO]: 2024-04-18 00:28:24,162 iter: 36250, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0436, cls: 0.0222, iou: 0.0649), misc (ry: 0.12, z: 0.26), dt: 0.80, eta: 3.1h
[INFO]: 2024-04-18 00:31:34,856 iter: 36500, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0471, cls: 0.0233, iou: 0.0650), misc (ry: 0.11, z: 0.27), dt: 0.80, eta: 3.0h
[INFO]: 2024-04-18 00:34:42,508 iter: 36750, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0476, cls: 0.0211, iou: 0.0674), misc (ry: 0.12, z: 0.28), dt: 0.80, eta: 3.0h
[INFO]: 2024-04-18 00:37:55,048 iter: 37000, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0436, cls: 0.0216, iou: 0.0638), misc (ry: 0.12, z: 0.28), dt: 0.80, eta: 2.9h
[INFO]: 2024-04-18 00:41:01,654 iter: 37250, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0450, cls: 0.0228, iou: 0.0652), misc (ry: 0.12, z: 0.27), dt: 0.80, eta: 2.8h
[INFO]: 2024-04-18 00:44:08,120 iter: 37500, acc (bg: 1.00, fg: 1.00, iou: 0.94), loss (bbox_3d: 0.0391, cls: 0.0201, iou: 0.0620), misc (ry: 0.11, z: 0.26), dt: 0.80, eta: 2.8h
[INFO]: 2024-04-18 00:47:15,717 iter: 37750, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0396, cls: 0.0206, iou: 0.0615), misc (ry: 0.11, z: 0.25), dt: 0.80, eta: 2.7h
[INFO]: 2024-04-18 00:50:24,904 iter: 38000, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0412, cls: 0.0215, iou: 0.0612), misc (ry: 0.10, z: 0.27), dt: 0.80, eta: 2.7h
[INFO]: 2024-04-18 00:53:32,358 iter: 38250, acc (bg: 1.00, fg: 1.00, iou: 0.94), loss (bbox_3d: 0.0424, cls: 0.0211, iou: 0.0604), misc (ry: 0.11, z: 0.26), dt: 0.80, eta: 2.6h
[INFO]: 2024-04-18 00:56:43,973 iter: 38500, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0426, cls: 0.0231, iou: 0.0615), misc (ry: 0.11, z: 0.26), dt: 0.80, eta: 2.6h
[INFO]: 2024-04-18 00:59:59,810 iter: 38750, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0387, cls: 0.0219, iou: 0.0600), misc (ry: 0.10, z: 0.25), dt: 0.80, eta: 2.5h
[INFO]: 2024-04-18 01:03:07,258 iter: 39000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0374, cls: 0.0204, iou: 0.0566), misc (ry: 0.10, z: 0.24), dt: 0.80, eta: 2.4h
[INFO]: 2024-04-18 01:06:16,762 iter: 39250, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0405, cls: 0.0217, iou: 0.0608), misc (ry: 0.11, z: 0.26), dt: 0.80, eta: 2.4h
[INFO]: 2024-04-18 01:09:27,348 iter: 39500, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0405, cls: 0.0211, iou: 0.0599), misc (ry: 0.10, z: 0.26), dt: 0.80, eta: 2.3h
[INFO]: 2024-04-18 01:12:37,490 iter: 39750, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0416, cls: 0.0207, iou: 0.0590), misc (ry: 0.11, z: 0.26), dt: 0.80, eta: 2.3h
[INFO]: 2024-04-18 01:15:42,945 iter: 40000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0377, cls: 0.0209, iou: 0.0571), misc (ry: 0.11, z: 0.26), dt: 0.80, eta: 2.2h
[INFO]: 2024-04-18 01:26:14,009 test_iter 40000 2d car --> easy: 0.9493, mod: 0.8658, hard: 0.6993
[INFO]: 2024-04-18 01:26:14,010 test_iter 40000 gr car --> easy: 0.2182, mod: 0.1792, hard: 0.1439
[INFO]: 2024-04-18 01:26:14,011 test_iter 40000 3d car --> easy: 0.1575, mod: 0.1310, hard: 0.1131
[INFO]: 2024-04-18 01:26:14,012 test_iter 40000 2d pedestrian --> easy: 0.6683, mod: 0.5874, hard: 0.5051
[INFO]: 2024-04-18 01:26:14,012 test_iter 40000 gr pedestrian --> easy: 0.1069, mod: 0.1062, hard: 0.1005
[INFO]: 2024-04-18 01:26:14,013 test_iter 40000 3d pedestrian --> easy: 0.1039, mod: 0.0998, hard: 0.1000
[INFO]: 2024-04-18 01:26:14,013 test_iter 40000 2d cyclist --> easy: 0.7114, mod: 0.4753, hard: 0.4707
[INFO]: 2024-04-18 01:26:14,014 test_iter 40000 gr cyclist --> easy: 0.0584, mod: 0.0534, hard: 0.0536
[INFO]: 2024-04-18 01:26:14,015 test_iter 40000 3d cyclist --> easy: 0.0573, mod: 0.0455, hard: 0.0455
[INFO]: 2024-04-18 01:29:20,351 iter: 40250, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0345, cls: 0.0196, iou: 0.0555), misc (ry: 0.10, z: 0.24), dt: 0.82, eta: 2.2h
[INFO]: 2024-04-18 01:32:30,501 iter: 40500, acc (bg: 1.00, fg: 0.99, iou: 0.94), loss (bbox_3d: 0.0382, cls: 0.0214, iou: 0.0587), misc (ry: 0.10, z: 0.25), dt: 0.82, eta: 2.2h
[INFO]: 2024-04-18 01:35:41,216 iter: 40750, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0353, cls: 0.0196, iou: 0.0559), misc (ry: 0.10, z: 0.24), dt: 0.81, eta: 2.1h
[INFO]: 2024-04-18 01:38:53,946 iter: 41000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0366, cls: 0.0207, iou: 0.0576), misc (ry: 0.11, z: 0.25), dt: 0.81, eta: 2.0h
[INFO]: 2024-04-18 01:42:04,631 iter: 41250, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0360, cls: 0.0208, iou: 0.0576), misc (ry: 0.11, z: 0.24), dt: 0.81, eta: 2.0h
[INFO]: 2024-04-18 01:45:12,574 iter: 41500, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0382, cls: 0.0197, iou: 0.0555), misc (ry: 0.10, z: 0.26), dt: 0.81, eta: 1.9h
[INFO]: 2024-04-18 01:48:19,771 iter: 41750, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0348, cls: 0.0205, iou: 0.0549), misc (ry: 0.10, z: 0.24), dt: 0.81, eta: 1.9h
[INFO]: 2024-04-18 01:51:26,627 iter: 42000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0362, cls: 0.0197, iou: 0.0560), misc (ry: 0.10, z: 0.24), dt: 0.81, eta: 1.8h
[INFO]: 2024-04-18 01:54:35,774 iter: 42250, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0368, cls: 0.0206, iou: 0.0557), misc (ry: 0.10, z: 0.24), dt: 0.81, eta: 1.8h
[INFO]: 2024-04-18 01:57:45,722 iter: 42500, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0363, cls: 0.0225, iou: 0.0563), misc (ry: 0.10, z: 0.23), dt: 0.81, eta: 1.7h
[INFO]: 2024-04-18 02:00:50,623 iter: 42750, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0327, cls: 0.0194, iou: 0.0528), misc (ry: 0.10, z: 0.24), dt: 0.81, eta: 1.6h
[INFO]: 2024-04-18 02:03:56,483 iter: 43000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0338, cls: 0.0202, iou: 0.0540), misc (ry: 0.10, z: 0.23), dt: 0.81, eta: 1.6h
[INFO]: 2024-04-18 02:07:01,607 iter: 43250, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0327, cls: 0.0195, iou: 0.0528), misc (ry: 0.10, z: 0.22), dt: 0.81, eta: 1.5h
[INFO]: 2024-04-18 02:10:10,862 iter: 43500, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0309, cls: 0.0189, iou: 0.0513), misc (ry: 0.09, z: 0.22), dt: 0.81, eta: 1.5h
[INFO]: 2024-04-18 02:13:18,387 iter: 43750, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0349, cls: 0.0215, iou: 0.0521), misc (ry: 0.10, z: 0.21), dt: 0.81, eta: 1.4h
[INFO]: 2024-04-18 02:16:27,400 iter: 44000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0302, cls: 0.0193, iou: 0.0508), misc (ry: 0.10, z: 0.22), dt: 0.81, eta: 1.4h
[INFO]: 2024-04-18 02:19:38,066 iter: 44250, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0314, cls: 0.0190, iou: 0.0503), misc (ry: 0.09, z: 0.22), dt: 0.81, eta: 1.3h
[INFO]: 2024-04-18 02:22:47,817 iter: 44500, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0324, cls: 0.0193, iou: 0.0514), misc (ry: 0.10, z: 0.23), dt: 0.81, eta: 1.2h
[INFO]: 2024-04-18 02:25:54,674 iter: 44750, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0358, cls: 0.0213, iou: 0.0537), misc (ry: 0.10, z: 0.22), dt: 0.81, eta: 1.2h
[INFO]: 2024-04-18 02:29:02,542 iter: 45000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0347, cls: 0.0200, iou: 0.0526), misc (ry: 0.11, z: 0.22), dt: 0.81, eta: 1.1h
[INFO]: 2024-04-18 02:32:11,546 iter: 45250, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0316, cls: 0.0195, iou: 0.0502), misc (ry: 0.09, z: 0.22), dt: 0.81, eta: 1.1h
[INFO]: 2024-04-18 02:35:18,985 iter: 45500, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0333, cls: 0.0203, iou: 0.0518), misc (ry: 0.10, z: 0.23), dt: 0.81, eta: 1.0h
[INFO]: 2024-04-18 02:38:29,478 iter: 45750, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0365, cls: 0.0203, iou: 0.0528), misc (ry: 0.10, z: 0.22), dt: 0.81, eta: 57.3m
[INFO]: 2024-04-18 02:41:38,177 iter: 46000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0312, cls: 0.0205, iou: 0.0504), misc (ry: 0.10, z: 0.21), dt: 0.81, eta: 53.9m
[INFO]: 2024-04-18 02:44:44,506 iter: 46250, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0298, cls: 0.0192, iou: 0.0484), misc (ry: 0.09, z: 0.22), dt: 0.81, eta: 50.5m
[INFO]: 2024-04-18 02:47:52,268 iter: 46500, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0303, cls: 0.0192, iou: 0.0477), misc (ry: 0.10, z: 0.21), dt: 0.81, eta: 47.1m
[INFO]: 2024-04-18 02:51:02,977 iter: 46750, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0285, cls: 0.0187, iou: 0.0475), misc (ry: 0.09, z: 0.21), dt: 0.81, eta: 43.7m
[INFO]: 2024-04-18 02:54:10,972 iter: 47000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0324, cls: 0.0192, iou: 0.0490), misc (ry: 0.10, z: 0.22), dt: 0.81, eta: 40.4m
[INFO]: 2024-04-18 02:57:23,230 iter: 47250, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0311, cls: 0.0198, iou: 0.0490), misc (ry: 0.09, z: 0.22), dt: 0.81, eta: 37.0m
[INFO]: 2024-04-18 03:00:32,022 iter: 47500, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0300, cls: 0.0195, iou: 0.0478), misc (ry: 0.09, z: 0.21), dt: 0.81, eta: 33.6m
[INFO]: 2024-04-18 03:03:43,464 iter: 47750, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0293, cls: 0.0185, iou: 0.0473), misc (ry: 0.09, z: 0.21), dt: 0.81, eta: 30.2m
[INFO]: 2024-04-18 03:06:49,713 iter: 48000, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0288, cls: 0.0185, iou: 0.0474), misc (ry: 0.09, z: 0.21), dt: 0.81, eta: 26.9m
[INFO]: 2024-04-18 03:09:58,004 iter: 48250, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0331, cls: 0.0204, iou: 0.0489), misc (ry: 0.09, z: 0.22), dt: 0.81, eta: 23.5m
[INFO]: 2024-04-18 03:13:05,104 iter: 48500, acc (bg: 1.00, fg: 1.00, iou: 0.96), loss (bbox_3d: 0.0286, cls: 0.0186, iou: 0.0464), misc (ry: 0.09, z: 0.20), dt: 0.81, eta: 20.1m
[INFO]: 2024-04-18 03:16:11,019 iter: 48750, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0304, cls: 0.0196, iou: 0.0477), misc (ry: 0.09, z: 0.20), dt: 0.80, eta: 16.8m
[INFO]: 2024-04-18 03:19:17,291 iter: 49000, acc (bg: 1.00, fg: 1.00, iou: 0.96), loss (bbox_3d: 0.0292, cls: 0.0191, iou: 0.0463), misc (ry: 0.09, z: 0.21), dt: 0.80, eta: 13.4m
[INFO]: 2024-04-18 03:22:25,766 iter: 49250, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0347, cls: 0.0202, iou: 0.0491), misc (ry: 0.10, z: 0.22), dt: 0.80, eta: 10.1m
[INFO]: 2024-04-18 03:25:34,916 iter: 49500, acc (bg: 1.00, fg: 0.99, iou: 0.95), loss (bbox_3d: 0.0310, cls: 0.0206, iou: 0.0477), misc (ry: 0.09, z: 0.21), dt: 0.80, eta: 6.7m
[INFO]: 2024-04-18 03:28:41,050 iter: 49750, acc (bg: 1.00, fg: 1.00, iou: 0.95), loss (bbox_3d: 0.0304, cls: 0.0197, iou: 0.0477), misc (ry: 0.09, z: 0.21), dt: 0.80, eta: 3.4m
[INFO]: 2024-04-18 03:31:45,011 iter: 50000, acc (bg: 1.00, fg: 1.00, iou: 0.96), loss (bbox_3d: 0.0284, cls: 0.0190, iou: 0.0464), misc (ry: 0.09, z: 0.21), dt: 0.80, eta: 0.8s
[INFO]: 2024-04-18 03:42:16,352 test_iter 50000 2d car --> easy: 0.9481, mod: 0.8673, hard: 0.6993
[INFO]: 2024-04-18 03:42:16,353 test_iter 50000 gr car --> easy: 0.2437, mod: 0.2010, hard: 0.1635
[INFO]: 2024-04-18 03:42:16,354 test_iter 50000 3d car --> easy: 0.1665, mod: 0.1394, hard: 0.1154
[INFO]: 2024-04-18 03:42:16,354 test_iter 50000 2d pedestrian --> easy: 0.7386, mod: 0.5975, hard: 0.5126
[INFO]: 2024-04-18 03:42:16,355 test_iter 50000 gr pedestrian --> easy: 0.0571, mod: 0.0570, hard: 0.0542
[INFO]: 2024-04-18 03:42:16,355 test_iter 50000 3d pedestrian --> easy: 0.0522, mod: 0.0519, hard: 0.0462
[INFO]: 2024-04-18 03:42:16,356 test_iter 50000 2d cyclist --> easy: 0.6640, mod: 0.4753, hard: 0.4122
[INFO]: 2024-04-18 03:42:16,357 test_iter 50000 gr cyclist --> easy: 0.0320, mod: 0.0243, hard: 0.0243
[INFO]: 2024-04-18 03:42:16,357 test_iter 50000 3d cyclist --> easy: 0.0284, mod: 0.0211, hard: 0.0144
